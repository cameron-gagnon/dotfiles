# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
#shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
    screen) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
		# We have color support; assume it's compliant with Ecma-48
		# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
		# a case would tend to support setf rather than setaf.)
		color_prompt=yes
    else
		color_prompt=yes
    fi
fi

#Reset
Reset='\e[0m'       # Text Reset

# Regular Colors
Black='\e[0;30m'        # Black
Red='\e[0;31m'          # Red
Green='\e[0;32m'        # Green
Yellow='\e[0;33m'       # Yellow
Blue='\e[0;34m'         # Blue
Purple='\e[0;35m'       # Purple
Cyan='\e[0;36m'         # Cyan
White='\e[0;37m'        # White

# Bold
BBlack='\e[1;30m'       # Black
BRed='\e[1;31m'         # Red
BGreen='\e[1;32m'       # Green
BYellow='\e[1;33m'      # Yellow
BBlue='\e[1;34m'        # Blue
BPurple='\e[1;35m'      # Purple
BCyan='\e[1;36m'        # Cyan
BWhite='\e[1;37m'       # White

# Underline
UBlack='\e[4;30m'       # Black
URed='\e[4;31m'         # Red
UGreen='\e[4;32m'       # Green
UYellow='\e[4;33m'      # Yellow
UBlue='\e[4;34m'        # Blue
UPurple='\e[4;35m'      # Purple
UCyan='\e[4;36m'        # Cyan
UWhite='\e[4;37m'       # White

# Background
On_Black='\e[40m'       # Black
On_Red='\e[41m'         # Red
On_Green='\e[42m'       # Green
On_Yellow='\e[43m'      # Yellow
On_Blue='\e[44m'        # Blue
On_Purple='\e[45m'      # Purple
On_Cyan='\e[46m'        # Cyan
On_White='\e[47m'       # White

# High Intensity
IBlack='\e[0;90m'       # Black
IRed='\e[0;91m'         # Red
IGreen='\e[0;92m'       # Green
IYellow='\e[0;93m'      # Yellow
IBlue='\e[0;94m'        # Blue
IPurple='\e[0;95m'      # Purple
ICyan='\e[0;96m'        # Cyan
IWhite='\e[0;97m'       # White

# Bold High Intensity
BIBlack='\e[1;90m'      # Black
BIRed='\e[1;91m'        # Red
BIGreen='\e[1;92m'      # Green
BIYellow='\e[1;93m'     # Yellow
BIBlue='\e[1;94m'       # Blue
BIPurple='\e[1;95m'     # Purple
BICyan='\e[1;96m'       # Cyan
BIWhite='\e[1;97m'      # White

# High Intensity backgrounds
On_IBlack='\e[0;100m'   # Black
On_IRed='\e[0;101m'     # Red
On_IGreen='\e[0;102m'   # Green
On_IYellow='\e[0;103m'  # Yellow
On_IBlue='\e[0;104m'    # Blue
On_IPurple='\e[0;105m'  # Purple
On_ICyan='\e[0;106m'    # Cyan
On_IWhite='\e[0;107m'   # White

grey="\[\033[01;37m\]"
green="\[\033[01;32m\]"
red="\[\033[01;31m\]"
checkMark="\342\234\223"
cross="\342\234\227"


if [ "$color_prompt" = yes ]; then
    _bg_job_info() {
        num_jobs=$(jobs | wc -l);
        if [[ $num_jobs -gt 1 ]]; then # offset by 1 because there's a job that runs when the PS1 prompt is executed
            echo -e " \033[03;31m[$(($num_jobs-1))]\033[0m";
        fi
    }
    #PS1="$grey \$? \$(if [[ \$? == 0 ]]; then echo \"$green$checkMark\"; else echo \"$red$cross\"; fi) $(if [[ ${EUID} == 0 ]];then echo '\[\033[0;31m\]\h'; else echo '\[\033[01;32m\][\T]$(_bg_job_info)\033[01;35m$(declare -F __git_ps1 &> /dev/null && __git_ps1)\033[0m\033[03;39m\u@\h '; fi)\[\033[03;39m\]\w\n\033[01;30m$(echo -e '\xE2\x98\xA0') \[\033[00m\] "
    PS1="\[\033[01;37m\]\$? \$(if [[ \$? == 0 ]]; then echo \"\[\033[01;32m\]\342\234\223\"; else echo \"\[\033[01;31m\]\342\234\227\"; fi) $(if [[ ${EUID} == 0 ]];then echo '\[\033[0;31m\]\h'; else echo '\[\033[01;37m\][\T]\[\033[0m\]$(_bg_job_info)\[\033[00;33m\]$(declare -F __git_ps1 &> /dev/null && __git_ps1) \[\033[0m\]\[\033[3;34m\]\u@\h\[\033[0m\] '; fi)\[\033[3;33m\]\w\n\[\033[01;30m\]$(echo -e '\xE2\x98\xA0') \[\033[00m\] "


    PS2="continue -->"
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

LS_COLORS=$LS_COLORS:'di=1;4;31'
export LS_COLORS
IGNOREEOF=10 # Shell only exits after the 10th consecutive Ctrl-d

################################################################################
########                      GIT ALIASES                               ########
################################################################################
# export  this for gdb so we can use vim when we want to edit a file
# that is being run
export EDITOR=/usr/bin/vim
export GIT_EDITOR='vim'

# go to /usr/lib/git-core/git-sh-prompt for more config on git stuff

# You can also see if currently something is stashed, by setting
# git_ps1_showstashstate to a nonempty value. if something is stashed,
# then a '$' will be shown next to the branch name.
export GIT_PS1_SHOWDIRTYSTATE=true
export GIT_PS1_SHOWCOLORHINTS=true
export GIT_PS1_SHOWSTASHSTATE=true

# GIT_PS1_SHOWUNTRACKEDFILES to a nonempty value. If there're untracked
# files, then a '%' will be shown next to the branch name.  You can
export GIT_PS1_SHOWUNTRACKEDFILES=true


# export all shell commands to ~/.bashrc_log for better searching across
# multiple sessions
function prompt-command {
   date "+%Y-%m-%d %I:%M:%S ${PWD} [$?] \$ $(history 1 | cut -d' ' -f3-)" >> ~/.shell_log
}
export PROMPT_COMMAND='prompt-command'
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

[ -s ~/.scm_breeze/scm_breeze.sh ] && source ~/.scm_breeze/scm_breeze.sh

# must come after sourcing `scm_breeze` shortcutes otherwise `ge` will not be defined for use
[ -s ~/dotfiles/cmd_shortcuts/sourceme.sh ] && source ~/dotfiles/cmd_shortcuts/sourceme.sh
[ -s ~/.bash_aliases ] && source ~/.bash_aliases

cd ~/src

if command -v tmux>/dev/null; then
  [[ ! $TERM =~ screen ]] && [ -z $TMUX ] && exec tmux
fi

