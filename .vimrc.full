set nocompatible         " be iMproved, required must be first in .vimrc file
filetype off             " required

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"   => VUNDLE PLUGINS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#rc()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')
"

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'fatih/vim-go'

" a bunch of color schemes for vim
Plugin 'flazz/vim-colorschemes'

" autogenerate ctags files plugin
"Plugin 'szw/vim-tags'

" rsync stuff
"Plugin 'jacob-ogre/vim-syncr'

" syntax checking for python
Plugin 'scrooloose/syntastic'

Plugin 'rodjek/vim-puppet'

" lightweight statusline
Plugin 'itchyny/lightline.vim'

" PEP8 checking for python
Plugin 'nvie/vim-flake8'

" Asynchronous Lint Engine
" Shows linting errors in gutter
Plugin 'w0rp/ale'

" shows git changes in gutter
Plugin 'airblade/vim-gitgutter'
"let g:gitgutter_escape_grep = 1

Plugin 'mbbill/undotree'

Plugin 'hashivim/vim-terraform'

""" BEGIN GOD-LIKE SECTION """
" for adding/removing comments
Plugin 'tpope/vim-commentary'

" automatically completes blocks of code
" if/end, do/done, etc.
Plugin 'tpope/vim-endwise'

" [f, [x, [y, [u, [<space> commands
Plugin 'tpope/vim-unimpaired'

" git related magic
Plugin 'tpope/vim-fugitive'

" Vim sugar for UNIX shell commands
Plugin 'tpope/vim-eunuch'

" highlight a word/link and surround it with character(s)
Plugin 'tpope/vim-surround'

" core fzf plugin
Plugin 'junegunn/fzf'

" fzf plugin for vim
Plugin 'junegunn/fzf.vim'

""" END GOD-LIKE SECTION """

"Reload vimrc after editing
augroup reload_vimrc " {{{
    autocmd!
    autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END " }}}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"   => match opening and closing keywords in ruby
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
runtime macros/matchit.vim

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"   => vim-syncr shortcuts
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"autocmd BufWritePost * :Suplfil     " automatic syncr upload on write

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"   => Unite Plugin
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"nnoremap <C-m> :Unite file file_rec buffer<CR>
"nnoremap <C-;> :Unite line<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"   => NERDCommenter shortcuts
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let NERDCommentWholeLinesInVMode=1
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Align line-wise comment delimiters flush left instead of following code
" indentation
let g:NERDDefaultAlign = 'left'

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"   => You Complete Me Package ^^^
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ycm_confirm_extra_conf = 0
" set when the preview window will close
let g:ycm_autoclose_preview_window_after_completion = 0
let g:ycm_autoclose_preview_window_after_insertion  = 1

let g:ycm_filetype_blacklist = {'sql': 1}

" don't ever show preview window
set completeopt-=preview
"let g:ycm_add_preview_to_completeopt = 0

" typing ',g' will go to fn definition
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"   => MISC PLUGINS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" code folding
let g:SimpylFold_docstring_preview=1

" Display :Explore listing as tree by default
let g:netrw_liststyle= 4

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"   => Text and spacing
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"Everything adjusts to 4 spaces
set tabstop=4                   "Tab has length 4 spaces
"set softtabstop=4               "Tabs equate to 4 spaces
set expandtab                   "Tabs become softtabstop spaces

set textwidth=80                " Set files to be a maximum of 80 chars wide

" Makefiles require tabs not spaces
"augroup makefile
"    autocmd!
"    autocmd FileType make setlocal noexpandtab
"augroup END

set list                        " Show whitespace characters
set listchars=tab:â–¸\ ,trail:%   " helps notice bad tabbing & eliminates
                                " trailing whitespace characters

set shiftwidth=4                ">> shifts 4 spaces
set shiftround                  "Round indents to multiple of shiftwidth

set smarttab                    "<BS> deletes 1 tab's worth of spaces
set autoindent                  "Copy current indent when new line starts

set colorcolumn=80              "Highlight column 81 for line breaks

set pastetoggle=<F9>            "Toggle pasting from clipboard

set backspace=indent,eol,start  "Allow backspacing over auto-indents, etc

" Enable folding
set foldmethod=indent
set foldlevel=99

set fileformat=unix             "line endings as unix

set encoding=utf-8              "set default encoding to utf-8

let python_highlight_all = 1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"   => Color/Colorscheme
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"let g:solarized_termcolors=16  "Used the reduced set of 256 colors in terminal
syntax enable                   "Enable syntax highlighting
syntax on
set background=dark
set t_Co=256
colorscheme gruvbox
" Overrides gruvbox's SpellBad setting
hi SpellBad ctermfg=NONE

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"   => Core Vim Config
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set lazyredraw " redraw only when we need to (i.e. not in the middle of macros)

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"   => User Interface
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set number                      " Show line numbers
set relativenumber              " Show relative line numbers
set showcmd                     " Show command in the bottom bar
set spell spelllang=en_us       " Specify English_US locale
hi clear SpellBad
hi clear SpellCap
hi SpellBad ctermfg=LightRed
hi SpellCap ctermfg=LightGreen
set tags=tags;/


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"   => FUNCTIONS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Removes trailing spaces
" http://vimcasts.org/episodes/tidying-whitespace/
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

function ToggleRSpec()
  let buffername = split(expand('%:t:r'), "_")
  if buffername[-1] ==? "spec"
    return join(buffername[:-2], "_")
  else
    return join(buffername + ["spec.rb"], "_")
  endif
endfunction

" Line number toggle
function! NumberToggle()
  if(&relativenumber == 1)
    set number
    set nornu
  else
    set relativenumber
  endif
endfunc


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"   => Key mappings/Keybinds/Keyboard/remapping shortcuts
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn off search highlight using three hits of the space bar>
nnoremap <Space><Space><Space> :nohlsearch<CR>

" For a line wrapped to two lines, j and k won't skip over the wrapped part
nnoremap j gj
nnoremap k gk
" jj becomes <ESC>:wq if typed fast enough - exits the file
"inoremap jj <Esc> :wq <CR>
" Hitting Space + K causes a CTRL + D to be entered
nnoremap <Space>j <C-d>+
" Hitting Space + K causes a CTRL + U to be entered
nnoremap <Space>k <C-u><CR>

let mapleader=","             "Leader becomes a comma

"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

nnoremap <C-W><C-F> <C-W>vgf

" Enable folding with the spacebar
nnoremap <space> za

map <leader>exp :Explore<CR>

" mapping keybinds to function toggles
nnoremap <silent> <F2> :call <SID>StripTrailingWhitespaces()<CR>
nnoremap <C-i> :call NumberToggle()<cr>
" ty sam w. for the hookup
noremap <Leader>y :call fzf#run({'sink': 'vsplit', 'options': '-i -q ' . expand(ToggleRSpec()), 'down': 10})<CR>

" opens Explorer mode with Ctrl-n
map <C-n> :Vex<CR>

" paste ipdb set trace to debug
let @d="iimport ipdb; ipdb.set_trace();"

" copy to system clipboard
vnoremap <leader>c "*y

" highlight text then press // to search for it
vnoremap // y/\V<C-R>=escape(@",'/\')<CR><CR>

" source: https://superuser.com/questions/286985/reload-vimrc-in-vim-without-restart
map <leader>vimrc :tabe ~/.vim/.vimrc<cr>

" formats the selected text as json https://coderwall.com/p/faceag/format-json-in-vim
vmap =j :!python -m json.tool<CR>

" ctrl-p like functionality for fzf
nnoremap <C-p> :GFiles<CR>

" search current word and open results. Best if used with Ag/FZF
nnoremap <silent> <Leader>ag :Ag <C-R><C-W><CR>

" search for what's under cursor
" http://vim.wikia.com/wiki/Search_for_visually_selected_text
vnoremap // y/\V<C-r>=escape(@",'/\')<CR><CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"   => Typing Interface
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set ruler                       "Always show current position
"set cursorline                  "Highlight current line, horizontal line
set cursorcolumn

set visualbell                  "Visual cues on errors
set nowrap                      "Wrap long lines
set linebreak                   "Wrap lines at words instead of letters

set showmatch                   "Show matching parentheses
set matchtime=2                 "Length matched paren flashes (1/10 sec)
set matchpairs=(:),{:},[:],<:>  "Chars in a balanced pair

set wildmenu                    "Visual autocomplete for command menu

set incsearch                   "Search as characters are entered
set hlsearch                    "Highlight matches
set mouse=a                     "enable scrolling with the mouse

set backspace=2                 " make backspace work like most other apps

" Makes searches case-sensitive only if they contain upper-case characters
set ignorecase
set smartcase

" Search into subfolders and provides tab-completion for all file-related tasks
set path+=**

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"   => Filetype Based Behavior (see autocmd section for more)
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
filetype on                     "Enable filetype detection
filetype indent on              "Enable filetype indentation
filetype plugin indent on       "Enable filetype plugin indentation
filetype plugin on              "Enable filetype plugins

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                    GOOGLE FORMATTING FOR PYTHON                   "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

setlocal indentexpr=GetGooglePythonIndent(v:lnum)

let s:maxoff = 50 " maximum number of lines to look backwards.

function! GetGooglePythonIndent(lnum)

    "Indent inside parens.
    " Align with the open paren unless it is at the end of the line.
    " E.g.
    "   open_paren_not_at_EOL(100,
    "                         (200,
    "                          300),
    "                         400)
    "   open_paren_at_EOL(
    "       100, 200, 300, 400)
    call cursor(a:lnum, 1)
    let [par_line, par_col] = searchpairpos('(\|{\|\[', '', ')\|}\|\]', 'bW',
          \ "line('.') < " . (a:lnum - s:maxoff) . " ? dummy :"
          \ . " synIDattr(synID(line('.'), col('.'), 1), 'name')"
          \ . " =~ '\\(Comment\\|String\\)$'")
    if par_line > 0
        call cursor(par_line, 1)
        if par_col != col("$") - 1
            return par_col
        endif
    endif
    "Delegate the rest to the original function.
    return GetPythonIndent(a:lnum)
endfunction

let pyindent_nested_paren="&sw*2"
let pyindent_open_paren="&sw*2"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""                 LIGHTLINE                         """"""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set laststatus=2
let g:lightline = {
      \ 'colorscheme': 'one',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'fugitive#head'
      \ },
      \ }

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""                 C++ SYNTAX HIGHLIGHTING            """""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:cpp_class_scope_highlight = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""                 AG FOR VIM                         """""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"let g:ag_working_path_mode="r" " search from root of project dir


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""           Set file-specific indentiation           """""""""
" http://vimcasts.org/episodes/whitespace-preferences-and-filetypes/
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Only do this part when compiled with support for autocommands
if has("autocmd")
  " Enable file type detection
  filetype on

  " Syntax of these languages is fussy over tabs Vs spaces
  autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
  autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

  " Customisations based on house-style (arbitrary)
  autocmd FileType html setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType css setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType javascript setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType ruby setlocal shiftwidth=2 tabstop=2

  " Treat .rss files as XML
  autocmd BufNewFile,BufRead *.rss setfiletype xml

  autocmd BufWritePre *.py,*.js :call <SID>StripTrailingWhitespaces()
  autocmd BufWritePost .vimrc source $MYVIMRC "sources .vimrc on save
endif
